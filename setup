#!/usr/bin/env python3

from os import chdir, getcwd as pwd, popen as getOutputOf, system as run
from os.path import join as joinPath, dirname, exists as there
from shutil import copyfile
from colorama import init as colorama_init, Fore
from re import search
from sys import argv as args

def main():
    # check param (shell name)
    checkflag = True
    shell = "bash"
    
    try:
        args[1]
    except IndexError:
        checkflag = False
    
    if(checkflag):
        shell = args[1]

    colorama_init()
    with open(joinPath(pwd(), "main", "gct-version"), "r") as vers:
        version = vers.read().replace("\n","")
    print("      ", Fore.BLUE, "GitHub CodeSpace Toolkit", Fore.RESET)
    print("      ", Fore.BLUE, f"version {version}", Fore.RESET)
    print("      ", Fore.BLACK, ":made by d33pster:", Fore.RESET)
    print("      ", Fore.GREEN, "Install in Progress", Fore.RESET)

    # get current directory
    currentDirectory = pwd()
    print(Fore.RED, "INFO", Fore.RESET, f" : Retrieved current directory -> {currentDirectory}")
    # get main directory
    mainDirectory = joinPath(currentDirectory, "main")
    print(Fore.RED, "INFO", Fore.RESET, f" : Resolved main directory -> {mainDirectory}")
    # go to main directory
    chdir(mainDirectory)
    print(Fore.RED, "INFO", Fore.RESET, f" : Changed to {pwd()}")
    # get filenames
    filenames = getOutputOf("ls").readlines()
    print(Fore.RED, "INFO", Fore.RESET, " : Retreived Filenames")
    # run files that need running || copy files that need copying
    target = dirname(currentDirectory)
    print(Fore.RED, "INFO", Fore.RESET, f" : Resolved target Directory -> {target}")
    for file in filenames:
        file = file.replace("\n", "")
        if(file == "custombash"):
            continue
        if search("-run$", file)!=None:
            print(Fore.RED, "INFO", Fore.RESET, f" : Running {file.split('-')[1]}")
            run(f"python {joinPath(mainDirectory, file)} {shell}")
        else:
            if there(joinPath(target, file)):
                print(Fore.RED, "INFO", Fore.RESET, f" : Found existing file -> {file}")
                run(f"rm -rf {joinPath(target, file)}")
                print(Fore.RED, "INFO", Fore.RESET, f" : Deleted existing file -> {file}")
            copyfile(joinPath(mainDirectory, file), joinPath(target, file))
            run(f"chmod a+x {joinPath(target, file)}")
            print(Fore.RED, "INFO", Fore.RESET, f" : Copied file -> {file}")
        
    # run update to push the changes made by the setup
    chdir(target)

    # create gitignore file
    with open(".gitignore", "a") as gitignore:
        gitignore.write("\ngithub-codespace-toolkit\n")
    
    print(Fore.RED, "INFO", Fore.RESET, " : added entry in .gitignore file")
    
    run(f"{joinPath(target, 'update')} {joinPath(target, '.gitignore')} \".gitignore file updated by GCT\"")

    print(Fore.RED, "INFO", Fore.RESET, " : Updated .gitignore file")

    print(Fore.RED, "INFO", Fore.RESET, " : Updating Repo")
    for file in filenames:
        file = file.replace("\n", "")
        if search("-run$", file)==None:
            print(Fore.RED, "INFO", Fore.RESET, f" : updating -> {file}")
            run(f"{joinPath(target, 'update')} {joinPath(target, file)} \"GitHub CodeSpace Toolkit\"")
    
    # update git rule
    run("git config advice.addIgnoredFile false")
    print(Fore.RED, "INFO", Fore.RESET, " : Updated git rule")
    
    # acknowledge
    print(Fore.GREEN, "Installed GitHub CodeSpace Toolkit", Fore.RESET)

if __name__=="__main__":main()